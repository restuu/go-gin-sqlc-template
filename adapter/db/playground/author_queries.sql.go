// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: author_queries.sql

package playground

import (
	"context"
)

const findAllAuthors = `-- name: FindAllAuthors :many
SELECT id, name FROM authors
`

func (q *Queries) FindAllAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, findAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAuthorByID = `-- name: FindAuthorByID :one
SELECT id, name FROM authors
WHERE id = ?
`

func (q *Queries) FindAuthorByID(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, findAuthorByID, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findAuthorsWithName = `-- name: FindAuthorsWithName :many
SELECT id, name FROM authors
WHERE name LIKE CONCAT('%', ?, '%')
`

func (q *Queries) FindAuthorsWithName(ctx context.Context, concat interface{}) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, findAuthorsWithName, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuthors = `-- name: InsertAuthors :execlastid
INSERT INTO authors(name)
VALUES (?)
`

func (q *Queries) InsertAuthors(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertAuthors, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
