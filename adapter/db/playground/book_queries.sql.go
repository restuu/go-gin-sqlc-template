// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: book_queries.sql

package playground

import (
	"context"
)

const findAllBooks = `-- name: FindAllBooks :many
SELECT id, title, author_id FROM books
`

func (q *Queries) FindAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.AuthorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findBooksByAuthor = `-- name: FindBooksByAuthor :many
SELECT id, title, author_id FROM books b
WHERE b.author_id = ?
`

func (q *Queries) FindBooksByAuthor(ctx context.Context, authorID int64) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.AuthorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBook = `-- name: InsertBook :execlastid
INSERT INTO books(title, author_id)
VALUES (?, ?)
`

type InsertBookParams struct {
	Title    string `db:"title" json:"title"`
	AuthorID int64  `db:"author_id" json:"author_id"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertBook, arg.Title, arg.AuthorID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
