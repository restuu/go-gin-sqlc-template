// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/google/wire"
	"go-gin-sqlc-template/adapter/config"
	"go-gin-sqlc-template/adapter/db"
	"go-gin-sqlc-template/adapter/db/playground"
	"go-gin-sqlc-template/adapter/router"
	"go-gin-sqlc-template/app/author"
	"go-gin-sqlc-template/domain"
	"net/http"
)

// Injectors from wire.go:

func initApp(ctx context.Context) (*App, error) {
	domainConfig, err := config.ReadConfig()
	if err != nil {
		return nil, err
	}
	databases := domainConfig.DB
	dbConfig := databases.Playground
	sqlDB, err := db.OpenMySQL(ctx, dbConfig)
	if err != nil {
		return nil, err
	}
	queries := playground.New(sqlDB)
	queryWrapper := db.WrapQuery(sqlDB, queries)
	usecase := author.NewAuthorUsecase(queryWrapper)
	usecases := &domain.Usecases{
		AuthorUsecase: usecase,
	}
	handler := router.InitHandler(usecases)
	server := serverProvider(handler)
	app := &App{
		db:      sqlDB,
		queries: queries,
		server:  server,
	}
	return app, nil
}

// wire.go:

var (
	queryPlaygroundProvider = wire.NewSet(wire.FieldsOf(new(*domain.Config), "DB"), wire.FieldsOf(new(domain.Databases), "Playground"), db.OpenMySQL, wire.Bind(new(playground.DBTX), new(*sql.DB)), playground.New, db.WrapQuery)

	authorUsecaseProvider = wire.NewSet(wire.Bind(new(domain.AuthorUsecase), new(*author.Usecase)), author.NewAuthorUsecase)

	usecasesProvider = wire.NewSet(
		authorUsecaseProvider, wire.Struct(new(domain.Usecases), "*"),
	)
)

func serverProvider(handler http.Handler) *http.Server {
	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", 8000),
		Handler: handler,
	}

	return server
}
